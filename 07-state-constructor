<!DOCTYPE html>
<html>
  <head>
       <meta charset="UTF-8">

      <script src="https://unpkg.com/react@15/dist/react.min.js"></script>
      <script src="https://unpkg.com/react-dom@15/dist/react-dom.min.js"></script>
      <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.24.0/babel.js"></script>

  </head>
  <body>
  
  <!--Ejemplo básico de constructor -->
  <!--El método contructor es llamado antes del componente de react y es utilizado para establecer su estado inicial-->
  <!--Hay que llamar a super(props) ó el this.props atributo no va a funcionar-->
  <!--El primer argumento del método constructor() representa las propiedades que pasarán por el componente-->
  
  class Counter extends React.Component{
    constructor(props){
        super(props)
    }
    render(){
          return <div>Hello World!</div>
      }
  }
  
  <!-- Agregando un estado inicial -->
  <!--El estado puede ser representado como un objeto con atributos-->
  
  class Counter extends React.Component{
    constructor(props){
        super(props)
        this.state = {foo:123,bar:456}
    }
    render(){
          return <div>foo:{this.state.foo} bar:{this.state.bar}</div>
      }
  }
  
  <!-- cambiando de estado -->
  <!--El método setState(updater,[callback]) es usado para actualizar el estado-->
  <!--Él toma un objeto actualizador y actualiza el estado del componente-->
  <!--Toma el objeto que actualiza y actualiza el estado del componente poniéndo por encima del anterior, el nuevo estado-->
  <!--Hay una opció de callback que será llamada una vez que la actualización se haya completado-->
  <!--Para usar el método setState() se debe usar this.setState()-->
  
 ->   this.setState({message:"new message"})
  
  
  ej: de cambio de estado
  
  class Counter extends React.Component{
    constructor(props){
        super(props)
        //initial state set up
        this.state = {message:"initial message"}
    }
    componentDidMount(){
        //updating state
        this.setState({message:"new message"})
    }
    render(){
        return <div>Message:{this.state.message}</div>
    }
}


<!--Updating state based on previous state-->
<!--El método setState() no actualiza de inmediato el estado del componente, 
    solo pone el nuevo estado en línea para ser llamado posteriormente-->
<!--React puede almacemar muchas solicitudes de actualización para hacer el render mas eficiente-->
<!--Debido a esto, se deben tomar precauciones especiales al actualizar el estado 
    según el estado anterior del componente-->

class Counter extends React.Component{
    constructor(props){
        super(props)
        //initial state set up
        this.state = {value:0}
    }
    componentDidMount(){
        //updating state
        this.setState({value:this.state.value+1})
        this.setState({value:this.state.value+1})
        this.setState({value:this.state.value+1})
        this.setState({value:this.state.value+1})
    }
    render(){
        return <div>Message:{this.state.message}</div>
    }
}


  
  </body>
  
  <html>
